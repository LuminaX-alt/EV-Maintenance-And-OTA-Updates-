# -*- coding: utf-8 -*-
"""TATA TECHNOLOGIES

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rt1K63h2IRbrMnPdqt0dignRC2A47R_o
"""

# Install required libraries (only once)
!pip install -q numpy pandas scikit-learn matplotlib seaborn tqdm

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
import pickle  # for saving the model later

# Simulate 98,000 rows of normal telemetry data
np.random.seed(42)
n_normal = 98000

normal_data = pd.DataFrame({
    "battery_temp": np.random.normal(loc=45, scale=5, size=n_normal),     # in °C
    "voltage": np.random.normal(loc=380, scale=15, size=n_normal),        # in V
    "tire_pressure": np.random.normal(loc=32, scale=2, size=n_normal),    # in psi
    "current": np.random.normal(loc=100, scale=25, size=n_normal),        # in A
    "speed": np.random.normal(loc=60, scale=10, size=n_normal)            # in km/h
})
normal_data["anomaly"] = 0
normal_data.head()

from google.colab import sheets
sheet = sheets.InteractiveSheet(df=normal_data)

# Generate 2,000 rows of anomalous data
n_anomalies = 2000

anomaly_data = pd.DataFrame({
    "battery_temp": np.random.uniform(75, 120, size=n_anomalies),
    "voltage": np.random.uniform(150, 250, size=n_anomalies),
    "tire_pressure": np.random.uniform(10, 20, size=n_anomalies),
    "current": np.random.uniform(200, 300, size=n_anomalies),
    "speed": np.random.uniform(0, 20, size=n_anomalies)
})
anomaly_data["anomaly"] = 1

# Combine and shuffle the data
df = pd.concat([normal_data, anomaly_data], ignore_index=True)
df = df.sample(frac=1).reset_index(drop=True)
df.head()

from google.colab import sheets
sheet = sheets.InteractiveSheet(df=df)

# Quick scatterplot to visualize anomalies
plt.figure(figsize=(10, 5))
sns.scatterplot(data=df.sample(1000), x="speed", y="battery_temp", hue="anomaly", palette="coolwarm")
plt.title("Speed vs Battery Temp (Sampled)")
plt.grid(True)
plt.show()

# Prepare data
features = ["battery_temp", "voltage", "tire_pressure", "current", "speed"]
scaler = StandardScaler()
X_scaled = scaler.fit_transform(df[features])

# Train model
model = IsolationForest(n_estimators=100, contamination=0.02, random_state=42)
model.fit(X_scaled)

# Predict
df["predicted"] = model.predict(X_scaled)
df["predicted"] = df["predicted"].map({1: 0, -1: 1})

from sklearn.metrics import classification_report, confusion_matrix

print("Confusion Matrix:")
print(confusion_matrix(df["anomaly"], df["predicted"]))

print("\nClassification Report:")
print(classification_report(df["anomaly"], df["predicted"]))

# Save the model and scaler
with open("model.pkl", "wb") as f:
    pickle.dump(model, f)

with open("scaler.pkl", "wb") as f:
    pickle.dump(scaler, f)

from google.colab import files
files.download("model.pkl")
files.download("scaler.pkl")

from google.colab import files

uploaded = files.upload()  # Upload model.pkl and scaler.pkl

import pickle

# Load model and scaler
with open("model.pkl", "rb") as f:
    model = pickle.load(f)

with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)

import time
import numpy as np

features = ["battery_temp", "voltage", "tire_pressure", "current", "speed"]

def simulate_telemetry():
    # 5% chance to simulate an anomaly
    is_anomaly = np.random.rand() < 0.05

    if is_anomaly:
        # Inject abnormal values
        data = {
            "battery_temp": np.random.uniform(75, 120),
            "voltage": np.random.uniform(150, 250),
            "tire_pressure": np.random.uniform(10, 20),
            "current": np.random.uniform(200, 300),
            "speed": np.random.uniform(0, 20)
        }
    else:
        # Normal telemetry values
        data = {
            "battery_temp": np.random.normal(45, 5),
            "voltage": np.random.normal(380, 15),
            "tire_pressure": np.random.normal(32, 2),
            "current": np.random.normal(100, 25),
            "speed": np.random.normal(60, 10)
        }

    return data

# Simulate 20 readings with prediction
for i in range(20):
    data = simulate_telemetry()
    input_vector = scaler.transform([list(data.values())])
    prediction = model.predict(input_vector)[0]
    result = "Anomaly" if prediction == -1 else "Normal"

    print(f"{i+1:02d}. Telemetry: {data} → {result}")
    time.sleep(2)  # Delay to simulate real-time input

pip install streamlit

from google.colab import files
uploaded = files.upload()

import pickle

with open("model.pkl", "rb") as f:
    model = pickle.load(f)

with open("scaler.pkl", "rb") as f:
    scaler = pickle.load(f)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import time
from IPython.display import clear_output

def simulate_telemetry():
    is_anomaly = np.random.rand() < 0.05
    if is_anomaly:
        return {
            "battery_temp": np.random.uniform(75, 120),
            "voltage": np.random.uniform(150, 250),
            "tire_pressure": np.random.uniform(10, 20),
            "current": np.random.uniform(200, 300),
            "speed": np.random.uniform(0, 20)
        }
    else:
        return {
            "battery_temp": np.random.normal(45, 5),
            "voltage": np.random.normal(380, 15),
            "tire_pressure": np.random.normal(32, 2),
            "current": np.random.normal(100, 25),
            "speed": np.random.normal(60, 10)
        }

log = []

for i in range(30):  # simulate 30 readings
    data = simulate_telemetry()
    X = scaler.transform([list(data.values())])
    pred = model.predict(X)[0]
    result = "Anomaly" if pred == -1 else "Normal"
    timestamp = datetime.now().strftime("%H:%M:%S")

    row = {
        "time": timestamp,
        **data,
        "prediction": result
    }
    log.append(row)

    # Create DataFrame from log
    df = pd.DataFrame(log)

    # Clear previous output to update in-place
    clear_output(wait=True)

    # Show last 10 records in table
    display(df.tail(10).style.applymap(
        lambda x: 'color: red; font-weight: bold' if x == "Anomaly" else '',
        subset=['prediction']
    ))

    # Plot last 30 telemetry readings
    fig, axs = plt.subplots(1, 3, figsize=(15, 4))
    axs[0].plot(df['battery_temp'][-30:], label='Battery Temp (°C)')
    axs[1].plot(df['voltage'][-30:], label='Voltage (V)', color='orange')
    axs[2].plot(df['speed'][-30:], label='Speed (km/h)', color='green')
    for ax in axs:
        ax.legend()
        ax.grid(True)
    plt.tight_layout()
    plt.show()

    time.sleep(2)